" Source your .vimrc
" source ~/.vimrc

let mapleader=' '

" -- Keymaps

nnoremap U <C-r>
nnoremap <leader>cc :edit ~/.ideavimrc<CR>
nnoremap <leader>cs :source ~/.ideavimrc<CR>:nohlsearch<CR>
nnoremap <leader>hh :nohlsearch<CR>
inoremap jk <ESC>
nnoremap <leader>gg ggVGy

" -- Options
set clipboard^=unnamed,unnamedplus
set matchpairs+=<:>
set ideajoin
set hlsearch
set ignorecase
set smartcase
set incsearch
" set timeoutlen=1000

" -- 이해 부족한 것들
set scrolloff=5
map <leader>vs <Action>(ViewSource) " 커서가 위치한 요소의 원본 소스 코드를 보여줍니다.
map <leader>uu <Action>(ShowUsages) " 클래스, 변수, 함수, 메서드 등 코드 요소가 프로젝트 내에서 어디에서 사용되고 있는지 목록을 보여줍니다.
map <leader>qt <Action>(QuickTypeDefinition)
map <leader>ra <Action>(RearrangeCode)

" -- Actions
nnoremap w [w
nnoremap e ]w
nnoremap b [b
nnoremap ge ]b

" -- Navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader>] :action NextTab<CR>
nnoremap <leader>[ :action PreviousTab<CR>
map mk <Action>(MethodUp)
map mj <Action>(MethodDown)
map <leader>lc <Action>(JumpToLastChange)

" -- Tab
map <leader>sv <Action>(SplitVertically)
map <leader>sh <Action>(SplitHorizontally)
map <leader>sa <Action>(UnsplitAll)
map <leader>sm <Action>(ToggleDistractionFreeMode)

map <leader>fc <Action>(GotoClass)
map <leader>ff <Action>(GotoFile)
map <leader>fs <Action>(GotoSymbol)
map <leader>fa <Action>(GotoAction)
map <leader>fr <Action>(RecentFiles)
map <leader>ll <Action>(RecentLocations)

map gd <Action>(GotoDeclaration)
map gi <Action>(GotoImplementation)
map gt <Action>(GotoTypeDeclaration)
map gm <Action>(GotoSuperMethod)
map <leader>T <Action>(GotoTest)

map <leader>ug <Action>(FindUsages)
map <leader>qi <Action>(QuickImplementations)
map <leader>et <Action>(ExpressionTypeInfo)
map <leader>hi <Action>(ShowHoverInfo)
map <leader>oo <Action>(FileStructurePopup)

map <S-f> <Action>(Find)
map <S-r> <Action>(Replace)
map <leader>F <Action>(FindInPath)
map <leader>R <Action>(ReplaceInPath)

"-- Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

map <leader>aa <Action>(ShowIntentionActions)
map <leader>sw <Action>(SurroundWith)
map <S-space> <Action>(Generate)
map <S-k> <Action>(EditorDuplicateLines)
nnoremap <C-;> :action EditorCompleteStatement<CR>
inoremap <C-;> :action EditorCompleteStatement<CR>
map <A-j> <Action>(MoveLineDown)
map <A-k> <Action>(MoveLineUp)
map <A-S-j> <Action>(MoveStatementDown)
map <A-S-k> <Action>(MoveStatementUp)

map <leader>en <Action>(GotoNextError)
map <leader>ep <Action>(GotoToPreviousError)
map <leader><leader> <Action>(ReformatCode)
map <leader>oi <Action>(OptimizeImports)

map <leader>ca <Action>(CopyAbsolutePath)
map <leader>cn <Action>(CopyFileName)
map <leader>cp <Action>(CopyContentRootPath)

map <leader>ri <Action>(RestartIde)
map <leader>qq <Action>(CloseContent)
map <leader>qa <Action>(CloseAllEditors)

nnoremap <leader>= :action EditorIncreaseFontSizeGlobal<CR>
nnoremap <leader>- :action EditorDecreaseFontSizeGlobal<CR>

map <leader>1 <Action>(Stop)
map <leader>2 <Action>(RunClass)
map <leader>3 <Action>(DebugClass)
map <leader>4 <Action>(Run)
map <leader>5 <Action>(Debug)

map <leader>t <Action>(ActivateTerminalToolWindow)
map <C-r> <Action>(ActivateRunToolWindow)
map <C-q> <Action>(HideActiveWindow)
map <C-t> <Action>(JumpToLastWindow)

nnoremap <leader>zz :action CollapseRegion<cr>
nnoremap <leader>zo :action ExpandRegion<cr>

" -- Plugins

Plug 'easymotion/vim-easymotion'
map <leader>J <Plug>(easymotion-s)
map <leader>j <Plug>(easymotion-f)

set which-key
set notimeout
let g:WhichKey_FontSize = 13

Plug 'preservim/nerdtree'
map <leader>ee :NERDTree<cr>

set commentary

Plug 'tpope/vim-surround'

""" multiple-cursors
" Emulates vim-multiple-cursors
" Basic Commands:
" mc start multicursor
" mc next match
" mx skip next match
" mp remove current match and go back to previous one
" See https://github.com/terryma/vim-multiple-cursors for details
"""
Plug 'terryma/vim-multiple-cursors'
map mc <A-n>
map mx <A-x>
map mp <A-p>

" -- Reference
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc
" Plugins, Enable IdeaVim plugins https://jb.gg/ideavim-plugins
"" Map IDE actions to IdeaVim -- https://jb.gg/abva4t

""" Nerdtree
"o	Open files, directories and bookmarks	g:NERDTreeMapActivateNode
"go	Open selected file, but leave cursor in the NERDTree	g:NERDTreeMapPreview
"t	Open selected node/bookmark in a new tab	g:NERDTreeMapOpenInTab
"T	Same as 't' but keep the focus on the current tab	g:NERDTreeMapOpenInTabSilent
"i	Open selected file in a split window	g:NERDTreeMapOpenSplit
"gi	Same as i, but leave the cursor on the NERDTree	g:NERDTreeMapPreviewSplit
"s	Open selected file in a new vsplit	g:NERDTreeMapOpenVSplit
"gs	Same as s, but leave the cursor on the NERDTree	g:NERDTreeMapPreviewVSplit
"O	Recursively open the selected directory	g:NERDTreeMapOpenRecursively
"x	Close the current nodes parent	g:NERDTreeMapCloseDir
"X	Recursively close all children of the current node	g:NERDTreeMapCloseChildren
"P	Jump to the root node	g:NERDTreeMapJumpRoot
"p	Jump to current nodes parent	g:NERDTreeMapJumpParent
"K	Jump up inside directories at the current tree depth	g:NERDTreeMapJumpFirstChild
"J	Jump down inside directories at the current tree depth	g:NERDTreeMapJumpLastChild
"<C-J>	Jump down to next sibling of the current directory	g:NERDTreeMapJumpNextSibling
"<C-K>	Jump up to previous sibling of the current directory	g:NERDTreeMapJumpPrevSibling
"r	Recursively refresh the current directory	g:NERDTreeMapRefresh
"R	Recursively refresh the current root	g:NERDTreeMapRefreshRoot
"m	Display the NERDTree menu	g:NERDTreeMapMenu
"q	Close the NERDTree window	g:NERDTreeMapQuit
"A	Zoom (maximize/minimize) the NERDTree window	g:NERDTreeMapToggleZoom
"d	Delete file or directory	g:NERDTreeMapDelete
"n	Create File	g:NERDTreeMapNewFile
"N	Create Directory	g:NERDTreeMapNewDir
"""
""" Surround
" 1. 추가 (Surround): ys (요소 추가)
"    - ys + 텍스트객체 + 문자
"    - 예시: 'hello'를 만들고 싶을 때, 커서를 h에 두고: ys iw '
"      "hello"를 만들고 싶을 때: ys iw "
"      <div>hello</div>를 만들고 싶을 때: ys iw <div>
"
" 2. 변경 (Change): cs (주변 문자 변경)
"    - cs + 현재주변문자 + 새주변문자
"    - 예시: ('hello')를 ['hello']로 변경하고 싶을 때: cs ) ]
"    - 예시: "hello"를 'hello'로 변경하고 싶을 때: cs " '
"    - 예시: <div>...</div>를 <span>...</span>로 변경하고 싶을 때: cst span
"
" 3. 삭제 (Delete): ds (주변 문자 삭제)
"    - ds + 현재주변문자
"    - 예시: [hello]에서 괄호를 지우고 싶을 때: ds ]
"    - 예시: "hello"에서 따옴표를 지우고 싶을 때: ds "
"    - 예시: <span>...</span>에서 태그를 지우고 싶을 때: dst
"""
